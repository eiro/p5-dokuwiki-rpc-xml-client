#! /usr/bin/perl
use Dokuwiki::RPC::XML::Client;
use Modern::Perl;
use IO::All -utf8;
use Net::Netrc;
use YAML;
no warnings qw( once qw );

=head1 SYNOPSIS

dokuwiki-client is as cli wrapper to the XML::RPC perl client.

    dokuwiki-client show getVersion
    # prints the dokuwiki version
   
    dokuwiki-client show getPageHTML page:in:your:namespace 
    # show the rendered version of page:in:your:namespace 
    
    dokuwiki-client ls your:namespace
    # list the ids of pages in your:namespace 

=head1 Configure

configure a machine (the name isn't related to the dokuwiki base url) to store
the credentials 

    machine personnal.wiki
        login me
        password Ih4v3S3cr3ts

then, setup 2 environement variables

    export DOKUWIKI_CLIENT_BASE=http://my.wiki.example.com
    export DOKUWIKI_CLIENT_MACHINE=personal.wiki

=head1 Available subcommand

=cut

my $wiki = Dokuwiki::RPC::XML::Client->reach( $ENV{DOKUWIKI_CLIENT_BASE} || die );
my $credentials = Net::Netrc->lookup( $ENV{DOKUWIKI_CLIENT_MACHINE} || die  )
    or die "please add a fake $ENV{DW_MACHINE} machine in your ~/.netrc"; 
my ( $l, $p ) = $credentials->lpa; 
$wiki->login( $l, $p ) or die;

=head2 call

call an XML::RPC method and dump the result as a YAML in stdout

    dokuwiki-client call getPagelist your:namespace

=cut

sub call {
    my $method = shift;
    say YAML::Dump $wiki->$method( @_ );
}

=head2 show

call an XML::RPC method and print the result in stdout

    dokuwiki-client show getVersion

=cut

sub show {
    my $method = shift;
    say $wiki->$method( @_ );
} 

=head2 ls

list the entries of a namespace

    # dokuwiki-client ls my:namespace
    page1
    page2
    page3
    ...

=cut

sub ids_of (_) { map { $$_{id} } @{ (shift)  } }   
sub _ls        { ids_of $wiki->getPagelist( @_ ) }
sub ls         { say for &_ls }

=head2 page and html

are shortcuts for 

    dokuwiki-client show getPage foo
    dokuwiki-client show getPageHTML foo

=cut

sub page  { show getPage     => @_ } 
sub html  { show getPageHTML => @_ }

=head2 with

last argument is a code perl that will be evaluted and executed while the
XML-RPC result is stored as C<$_>. 

examples: 

    dokuwiki-client with getVersion say


    dokuwiki-client with search 'restore backup procedure' '
        say $$_{id} for @$_
    '

or use C<ids_of>

    dokuwiki-client with search 'restore backup procedure' '
        say for ids_of
    '
moar examples

    dokuwiki-client with getPagelist my:namespace '
        say for grep /dataviz/, map $$_{id}, @$_ 
    '

=cut

# untested! maybe a nicer more generic each: 
# dokuwiki-client each 'print $$_{id} if $$_{id} ~~ /foo/' getPagelist my:namespace 
#
# sub find {
#     my $when = do {
#         my $code = shift or die "invalid filter";
#         my $sub  = eval "sub {$code}";
#         $@ and die "can't eval ($code) : $@";
#         $sub;
#     }; 
#     map { say if &$when } _ls @_;
# }

# Also: the hashes must be wrapped. How to do: 
# say for ls $wiki,'/metiers', { depth => 2 };
# say for grep /duprej/, find $wiki;
# my @files = ls $wiki,'/', { depth => 1 };   

sub with {
    my $code   = pop;
    my $sub    = eval "sub{$code}";
    die $@ if $@;

    my $method = shift;
    $wiki->can( $method ) or die "wiki can't $method";
    local $_ = $wiki->$method(@_);
    $sub->( $_ );

}

sub put {
    my ( $name, $file, %opt ) = @_;
    my $content = io($file)->all;
    $wiki->putPage( $name, $content, \%opt ); 
}


my $cmd = shift or exit;
my $sub = __PACKAGE__->can( $cmd )
    or die "$cmd isn't a valid command";
$sub->( @ARGV );

